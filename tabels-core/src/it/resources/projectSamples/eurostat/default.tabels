/*PROJECT BRIEFING
 *
 *File description:
 *     Statistical indicator: internet broad band penetration rate in european countries.
 *	   Author: Eurostat (European Statistic database)
 *     Format: PX (PC-Axis)
 *     Source: ec.europa.eu/eurostat
 *	   License: http://ec.europa.eu/geninfo/legal_notices_en.htm
 *
 *Program description:
 *	   This tabels sample shows the ability to design generic program to proccess specific file formats, i.e.
 *     the program below is valid to parse and proccess any statistical info encoded in a PX file. The output
 *	   is an RDf Data Cube vocabulary compliant representation.
 *
 *Output: 
 *     The generated RDF can be consumed via the SPARQL Endpoint, the Exhibit Faceted view and the Chart view.
 *
*/
PREFIX project: <http://idi.fundacionctic.org/tabels/project/eurostat/>
PREFIX my: <http://idi.fundacionctic.org/tabels/project/eurostat/resource/>
PREFIX scv: <http://purl.org/NET/scovo#>
PREFIX scvxl: <http://idi.fundacionctic.org/scovoxl/scovoxl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dcat: <http://www.w3.org/ns/dcat#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/#>
PREFIX qb: <http://purl.org/linked-data/cube#>

set sheets "MetaData"
    match[?title,?contents,?units,?source] in vertical at B1
    LET ?langTitle = setLangTag(?title,"es")
    LET ?resDataSet = resource(?title)
	LET ?resDataStructure = resource(concat(?title, "Structure"))
	set sheets "Contents"
		{not Windowed For ?x in rows
         				 When matches(?x, "")Do
                            For ?heading in cols
                              For ?values in rows filter AND(not matches(?values, ".*@.*"),not matches(?values, ""))
                                when not OR(contains(?values,":"),OR(contains(?values,".."),contains(?values,"\".\""))) do
                                  LET ?resValue = resource(concat(get-col(?values),get-row(?values),?values)) 
                                  WHEN matches(?heading,".*@.*")DO
                                      LET ?resDimension = resource(replace(?heading,"@","_")) 
                                      LET ?dimensionValueLabel = substring-before(?heading,"@")
                                      LET ?dimensionClassLabel = substring-after(?heading,"@")
                                      LET ?resComponent = resource(?dimensionClassLabel,my:component_)
                                      {WHEN matches(lower-case(?dimensionClassLabel),".*year.*|.*a単o.*|.*periodo.*|.*time.*|.*month.*|.*day.*")DO
                                          LET ?resContinouosDimensionClass = resource(?dimensionClassLabel);
                                       WHEN not matches(lower-case(?dimensionClassLabel),".*year.*|.*a単o.*|.*periodo.*|.*time.*|.*month.*|.*day.*")DO
                                                  LET ?resDimensionClass = resource(?dimensionClassLabel)
                                      };
   		not windowed For ?y in cols
             			When matches(?y,"")Do
             				For ?stub in rows
                              For ?values in cols filter AND(not matches(?values, ".*@.*"),not matches(?values, ""))
                                  when not OR(contains(?values,":"),OR(contains(?values,".."),contains(?values,"\".\""))) do
                                    LET ?resValue = resource(concat(get-col(?values),get-row(?values),?values)) 
                                        WHEN matches(?stub,".*@.*")DO
                                            LET ?resDimension = resource(replace(?stub,"@","_"))
                                            LET ?dimensionValueLabel = substring-before(?stub,"@")
                                            LET ?dimensionClassLabel = substring-after(?stub,"@")
                                            LET ?resComponent = resource(?dimensionClassLabel,my:component_)
                                            {WHEN matches(lower-case(?dimensionClassLabel),".*year.*|.*a単o.*|.*periodo.*")DO
                                                LET ?resContinouosDimensionClass = resource(?dimensionClassLabel);
                                             WHEN not matches(lower-case(?dimensionClassLabel),".*year.*|.*a単o.*|.*periodo.*")DO
                                                LET ?resDimensionClass = resource(?dimensionClassLabel)}
       }

//Head&Stub Dimensions Template
construct{ 
  ?resDimension rdfs:label ?dimensionValueLabel .
  ?resDataStructure qb:component ?resComponent .
  ?resComponent qb:dimension ?resDimensionClass ;
                qb:order "10". 
  ?resDimensionClass rdfs:label ?dimensionClassLabel
}

//Head&Stub Continuous Dimensions template
construct{ 
  ?resDimension rdfs:label ?dimensionValueLabel .
  ?resDataStructure qb:component ?resComponent .
  ?resComponent qb:dimension ?resContinouosDimensionClass ;
                qb:order "1".
  ?resContinouosDimensionClass a scvxl:ContinuousDimension ;
  								 rdfs:label ?dimensionClassLabel
}

//dataset 
construct  
{
  ?resDataSet a qb:DataSet ;
       	 	  rdfs:label ?langTitle ;
              scvxl:valuesMeasuredIn ?units;
              qb:structure ?resDataStructure .
   my:measure rdfs:label ?contents  
}

// Observation ->Item
construct
{
  ?resValue a qb:Observation ;
             qb:dataSet ?resDataSet ;
             my:measure ?values
}

construct
{
  ?resValue ?resDimensionClass ?resDimension .
}

construct
{
  ?resValue ?resContinouosDimensionClass ?resDimension 
}
           			
construct
{ 
  ?resDataStructure a qb:DataStructureDefinition ;
  					 qb:component [ qb:measure my:measure ] ;
					 qb:component [ qb:attribute scvxl:valuesMeasuredIn ] 
}
			
