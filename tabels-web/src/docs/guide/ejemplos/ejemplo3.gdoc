
En este tercer ejemplo volvemos a trabajar con un fichero excel fijándonos en alguna nueva funcionalidad que ofrece Tabels. La excel en este caso contiene resultados de experimentos y se trata de una excel muy densa, con muchos datos. Lo que se va a mostrar es como Tabels nos permite ser muy concretos identificando mediante un programa secciones específicas de datos para contruir un programa de transformación.

La imagen a continuación es una captura de una porción de la hoja 'Hoja2' de la excel que muestra parcialmente los grupos de datos que queremos capturar.

!ejemplo3.png!

Los resultados de los experimentos que nos interesan se encuentran en esta hoja 'Hoja2', entre las columnas 'A' y 'H', y empiezan en bloques por días a partir de la fila nº 25. Para los resultados de cada día se abre un bloque de filas: para el día 10 por ejemplo desde la fila 27 hasta la 47, representan los resultados para un animal concreto. En cada fila la columna 'A' contiene el valor del tratamiento que se ha dado al animal. Entre las columnas 'B' y 'I' se encuentran los números de los resultados obtenidos.

Para empezar a iterar sobre esos datos lo único que hay que especificar en el programa Tabels es primero la hoja en la que se encuentran, con la construcción 'SET sheets'. A continuación, creamos una iteración por filas para cada día de experimentos, pero al 'FOR' por filas le especificamos que empiece en la primera celda con la expresión 'STARTS AT A25'. Además, como ya hemos visto en ejemplos anteriores, creamos una 'ventana' para el día de experimentos mediante un filtro por expresión regular:

{code}
SET sheets "Hoja2"
    FOR ?experimentDay IN rows STARTS AT A25 FILTER matches(?experimentDay, "DAY [0-9]+")
		LET ?resourceExperimentDay = resource(?experimentDay, <http://example.com#>)
{code}

A partir de la variable de iteración '?experimentDay' se crea una variable para el recurso 'día de experimento' '?resourceExperimentDay'.

Para iterar por los experimentos efectuados por cada uno de los días se crea un iteración anidada por filas mediante otro 'FOR'. En esta ocasión el comienzo de la iteración se marca de forma relativa a la variable de la iteración padre, 2 celdas por debajo de la variable '?experimentDay', mediante especificar 'starts at 2 bottom'. El filtro usado selecciona sólo las celdas cuyo contenido esté formado por caracteres alfanuméricos o el carácter '.' (la cifras que aparecen como porcentajes en la excel son leídas como flotantes, por ejemplo, 21% como 0.21). 

{code}
FOR ?treatment IN rows starts at 2 bottom of ?experimentDay filter matches(?treatment,"[a-zA-Z0-9.]+")
	LET ?resourceTreatment = resource(concat("F1+",?treatment), <http://example.com#>)
	LET ?mouse = int-substract(get-row( ?treatment),get-row(?experimentDay))
	LET ?resourceMouse = resource(?mouse,<http://example.com#>) {
	..........
	}
{code}

Cada fila de esta iteración representaría dos entidades diferentes: por un lado el tratamiento usado (columna 'A') y por otro lado el ratón sobre el que se experimenta. Se crean variables de recursos para representar esas dos entidades. Para el ratón, se le asigna un número, que es la diferencia entre el número de la fila del experimento y el número de la fila base del día de experimentos: se usa para esto la función 'get-row', y la función 'int-substract' para hacer la resta.

Ya habíamos visto también en un ejemplo anterior el uso de 'MATCH' para recuperar bloques de variables a partir de celdas consecutivas. Para este programa se utiliza para recuperar los resultados del experimento en las celdas a la derecha en la misma fila que la variable de iteración '?treatment'. Se usa 'AT 6' y 'AT 1' para mover el comienzo de la captura de las variables entre corchetes. De esta forma el primer 'MATCH' capturaría los valores de dos celdas ('G' y 'H') y el segundo de cinco columnas (de la 'B' a la 'F'). Además se usan filtros específicos para estas capturas de tal forma que si no se cumple la condición en 'FILTER' ninguna de las variables del 'MATCH' captura su valor. Por ejemplo, en el segundo 'MATCH' del ejemplo, si en la celda 'F' (variable '?volume') no se encuentra un valor de número flotante ninguna de las cinco variables capturará el valor de su celda correspondiente:

{code}
MATCH [?averageVolume,?deviation] IN horizontal AT 6 right of ?treatment FILTER matches(?averageVolume,"[0-9,.]+") ;
MATCH [?height,?width,?depth,?death,?volume] IN horizontal AT 1 right of ?treatment FILTER matches(?volume,"[0-9,.]+")
{code}

Al final del programa aparece la lista de templates que generan el RDF (N3), usando el vocabulario de estadísticas Scovo. Se crean dimensiones scovo para representar las entidades 'día de experimento', 'tratamiento' y 'ratón'. Cada una de esas templates solo generaría código RDF cuando cambiara la variable de la que depende. Se crean 'items' que representan valores estadísticos granulares para las variables '?volume' y '?averageVolume'. Por ejemplo, para esta última su valor se asocia a un dataset y dos dimensiones, además de aplicar al item también la desviación estándar en la variable '?deviation' mediante la propiedad de Scovo 'ex:standardDeviation':

{code}
construct
{
    [ a scv:Item ;
        scv:dataset ex:AverageTumorVolume ;
        scv:dimension ?resourceExperimentDay ;
        rdf:value ?averageVolume;
        scv:dimension ?resourceTreatment;
        ex:standardDeviation ?deviation]
}
{code}

A continuación se lista el código completo del ejemplo:

{code}

@fetch ("dbpedia")
PREFIX ex: <http://example.org/ex#>
PREFIX scv: <http://purl.org/NET/scovo#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX scvxl: <http://idi.fundacionctic.org/scovoxl/scovoxl#>

set sheets "Hoja2"
    FOR ?experimentDay IN rows STARTS AT A25 FILTER matches(?experimentDay, "DAY [0-9]+")
		LET ?resourceExperimentDay = resource(?experimentDay, <http://example.com#>)
		FOR ?treatment IN rows starts at 2 bottom of ?experimentDay filter matches(?treatment,"[a-zA-Z0-9.]+")
 	    	LET ?resourceTreatment = resource(concat("F1+",?treatment), <http://example.com#>)
	   		LET ?mouse = int-substract(get-row( ?treatment),get-row(?experimentDay))
	   		LET ?resourceMouse = resource(?mouse,<http://example.com#>) {
            	MATCH [?averageVolume,?deviation] IN horizontal AT 6 right of ?treatment FILTER matches(?averageVolume,"[0-9,.]+") ;
            	MATCH [?height,?width,?depth,?death,?volume] IN horizontal AT 1 right of ?treatment FILTER matches(?volume,"[0-9,.]+")
	    	}
//SCOVO TEMPLATE DATASET Mouse-Day-Treatment
//DIMENSION EXPERIMENT DAY
construct 
{ 
    ?resourceExperimentDay a  ex:ExperimentDay ; 
                           skos:prefLabel ?experimentDay . 

    ex:ExperimentDay rdfs:subClassOf scv:Dimension ; 
                     skos:prefLabel "Experiment Day" 
    
} 

//DIMENSION TREATMENT

construct 
{ 
    ?resourceTreatment a ex:Treatment ;
                           skos:prefLabel ?treatment .
    ex:Treatment rdfs:subClassOf scv:Dimension ;
                     skos:prefLabel "Treatment"
    
}
//DIMENSION MOUSE
construct
{ 
    ?resourceMouse a ex:Mouse ;
                           skos:prefLabel ?mouse .
                     	   
    ex:Mouse rdfs:subClassOf scv:Dimension ;
                     skos:prefLabel "Mouse"
    
}
//DATA SEt & ITEM
construct
{
    [ a scv:Item ;
        scv:dataset ex:IndividualTumorVolume ;
        scv:dimension ?resourceMouse ;
        scv:dimension ?resourceExperimentDay ;
        rdf:value ?volume;
        scv:dimension ?resourceTreatment;
        ex:height ?height;
        ex:width ?width;
        ex:depth ?depth]
}
 construct 
{
    ex:IndividualTumorVolume a scv:Dataset ;
  	 skos:prefLabel "Individual Tumor Volume" ;
         scvxl:valuesMeasuredIn "Unidad volumen"
  
}

//SCOVO TEMPLATE DATASET Day-Treatment


//DATA SEt & ITEM
construct
{
    [ a scv:Item ;
        scv:dataset ex:AverageTumorVolume ;
        scv:dimension ?resourceExperimentDay ;
        rdf:value ?averageVolume;
        scv:dimension ?resourceTreatment;
        ex:standardDeviation ?deviation]
}
construct  
{
    ex:AverageTumorVolume a scv:Dataset ;
  	 skos:prefLabel "Average Tumor Volume" ;
         scvxl:valuesMeasuredIn "Unidad volumen"
  
}


{code}