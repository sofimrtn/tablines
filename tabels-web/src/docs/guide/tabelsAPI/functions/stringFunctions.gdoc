h4. Funciones

# concat
{code}
    concat(str1: String, str2: String , ...) : String
{code}
Devuelve la cadena resultante de concatenar las cadenas _str1_, _str2_, ....

# string-join
{code}
    string-join(str1: String; str2: String ; ... , sep: String) : String
{code}
Devuelve la cadena resultante de concatenar las cadenas _str1_, _str2_, .... separadas entre si por la cadena _sep_.

# substring
{code}
    substring(string: String , index: Int) : String
    substring(string: String , index: Int, length: Int) : String
{code}
Devuelve la subcadena de longitud _length_ empezando a contar en la posición _index_ de la cadena _string_. Si no se indica la longitud la subcadena terminará en el último elemento de la cadena _string_.

# string-length
{code}
    string-length(string: String) : int
{code}
Devuelve el número entero de caracteres que contiene la cadena _string_. 

# normalize-space
{code}
    normalize-space(string: String) : string
{code}
Devuelve la cadena original menos cualquier espacio. 

# upper-case
{code}
    upper-case(string: String) : string
{code}
Devuelve la cadena original con todos los caracteres en mayúsculas.
 
# lower-case
{code}
    lower-case(string: String) : string
{code}
Devuelve la cadena original con todos los caracteres en minúsculas.

# translate
{code}
    translate(string: String, pattern: String, replacement: String) : string
{code}
Devuelve la cadena resultante de cambiar cada caracter de la cadena _string_ que aparezca en la cadena _pattern_ en la posición *N* por el que aparezca en la cadena _replacement_ en la posición *N*. Si en la posición *N* de la cadena _replacement_ esta fuera de rango el caracter original se sustituirá por "".
 
h4. Predicados

# contains
{code}
    contains(container: String, content: String) : Boolean
{code}
Devuelve *true* sólo si la cadena _content_ es una subcadena de la cadena _container_.
  
# starts-with
{code}
    starts-with(string: String, start: String) : Boolean
{code}
Devuelve *true* sólo si los primeros caracteres de la cadena _string_ coinciden con la cadena _starts_.

# end-with
{code}
    ends-with(string: String, end: String) : Boolean
{code}
Devuelve *true* sólo si los últimos caracteres de la cadena _string_ coinciden con la cadena _ends_.

# substring-before
{code}
    substring-before(container: String, sufix: String) : String
{code}
Devuelve la subcadena de _container_  que contiene los caracteres desde el inicio de la cadena hasta la primera aparición en _container_ de la subcadena _sufix_.

# substring-after
{code}
    substring-after(container: String, prefix: String) : String
{code}
Devuelve la subcadena de _container_  que contiene los caracteres desde la primera aparición en _container_ de la subcadena _prefix_ hasta el final de la cadena.

# matches
{code}
    matches(literal: String, rExpression: Regex) : Boolean
{code}
Devuelve *true* sólo si la caden _literal_ encaja en la expresión regular _rExpression_.

# replace
{code}
    replace(container: String, rExpression: Regex, replacement: String) : String
{code}
Devuelve la cadena resultante al reemplazar todas las subcadenas contenidas en _container_ que encajen con la expresión regular _rExpression_ por la cadena _replacement_.

# compare
{code}
    compare(string1: String, string2: String) : Int
{code}
Devuelve un valor entero cómo resultado de la comparación de las cadenas_string1_ y _string2_. El resultado de la función es:
* Si _string1_ < _string2_ devuelve *-1*
* Si _string1_ == _string2_ devuelve *0*
* Si _string1_ > _string2_ devuelve *1*

h4. Funciones y predicados no en XPath 2.0
 
# levenshtein-distance
{code}
    levenshtein-distance(string1: String, string2: String) : Int
{code}
Devuelve un número entero que representa la diferencia entre las cadenas _string1_ y _string2_. Esta diferencia se calcula mediante una implementación del algoritmo de Leveshtein.
        
# first-index-of
{code}
    first-index-of(string1: String, string2: String) : Int
{code}
Devuelve un entero que indica la posición de la primera aparcición de la cadena _string2_ contenida en la cadena _string1_.

# last-index-of
{code}
    last-index-of(string1: String, string2: String) : Int
{code}
Devuelve un entero que indica la posición de la última aparcición de la cadena _string2_ contenida en la cadena _string1_.

# trim
{code}
    trim(string: String) : String
{code}
Devuelve la cadena original sin los espacios situados al comienzo y al final de la misma.


"string" isDefinedBy { (x:String) => x}
}

